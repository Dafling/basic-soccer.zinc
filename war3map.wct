//! zinc
library Globals
{
    public Hero Heroes[];
    public group TeamHeroes[];
    
    public constant real G      = 2.3;
    
    public struct Hero
    {
        private unit h          = null;
        private player p        = null;
        
        boolean IsInAir         = false;
        real Vz                 = 0.0;
        timer SlowDownTimer     = null;
        timer CantHoldBallTimer = null;
        
        static integer Tallness = 100;
        
        method getHandle() -> unit {
            return this.h;
        }
        method getPlayer() -> player {
            return this.p;
        }
        method setHeight(real h) {
            SetUnitFlyHeight(this.h, h, 0.0);
        }
        method getHeight() -> real {
            return GetUnitFlyHeight(this.h);
        }
        method isOwner() -> boolean {
            return this == Ball.Owner;
        }
        method setSpeed(real speed) {
            SetUnitMoveSpeed(this.h, speed);
        }
        method getLoc() -> location {
            return GetUnitLoc(this.h);
        }
        method getFacing() -> real {
            return GetUnitFacing(this.h);
        }
        method echo(string s) {
            p_echo(this.p, s);
        }
        method disableInteraction(real time) {
            DestroyTimer(this.CantHoldBallTimer);
            this.CantHoldBallTimer = CreateTimer();
            TimerStart(this.CantHoldBallTimer, time, false, function Hero.enableInteraction);
        }
        static method enableInteraction() {
            Hero h = Hero.getByExpiredTimer();
            DestroyTimer(h.CantHoldBallTimer);
            h.CantHoldBallTimer = null;
        }
        method slowDown(real time) {
            this.setSpeed(0.5*290);
            DestroyTimer(this.SlowDownTimer);
            this.SlowDownTimer = CreateTimer();
            TimerStart(this.SlowDownTimer, time, false, function Hero.StopSlowDown);
        }
        static method StopSlowDown() {
            Hero h = Hero.getByExpiredTimer();
            DestroyTimer(h.SlowDownTimer);
            h.SlowDownTimer = null;
            h.setSpeed(290);
        }
        method dispossess(real slowdowntime) {
            this.setSpeed(290);
            if (slowdowntime > 0)
                this.slowDown(slowdowntime);
            Ball.Owner = 0;
        }
        static method getByExpiredTimer() -> Hero {
            timer t = GetExpiredTimer();
            integer pid;
            for (1 <= pid <= 12)
                if (Heroes[pid].SlowDownTimer == t || Heroes[pid].CantHoldBallTimer == t)
                    return Heroes[pid];
            return 0;
        }
        static method create(player p) -> Hero {
            Hero h = Hero.allocate();
            location loc_player = GetRandomLocInRect(gg_rct_LeftTeamStay);
            unit u = CreateUnitAtLoc( p, 'H001', loc_player, 0 );
            SetHeroLevel( u, 10, false );
            GroupAddUnit( TeamHeroes[1], u );
            h.p = p;
            h.h = u;
            Heroes[cPid(p)] = h;
            return h;
        }
    }
    
    unit FLAG = null;
    
    public struct Flag
    {
        static method setLoc(location loc) {
            SetUnitPositionLoc(FLAG, loc);
        }
        static method hide() {
            ShowUnit(FLAG, false);
        }
        static method show() {
            ShowUnit(FLAG, true);
        }
    }
    
    function onInit()
    {
        TeamHeroes[1] = CreateGroup();
        TeamHeroes[2] = CreateGroup();
        
        FLAG = gg_unit_h004_0007;
        Flag.hide();
    }
}

library Common
{
    public
    {
        function cPid(player p) -> integer {
            return GetConvertedPlayerId(p);
        }
        function IsFilterUnitHero() -> boolean {
            integer pid = cPid(GetOwningPlayer(GetFilterUnit()));
            if (Heroes[pid] == 0)
                return false;
            else
                return GetFilterUnit() == Heroes[pid].getHandle();
        }
        function FilterPlayerStatePlaying() -> boolean {
            return GetPlayerSlotState(GetFilterPlayer()) == PLAYER_SLOT_STATE_PLAYING;
        }
        function echo(string s) {
            DisplayTextToForce(GetPlayersAll(),s);
        }
        function p_echo(player p, string s) {
            DisplayTextToPlayer(p,0,0,s);
        }
        function GetHero(unit u) -> Hero {
            player p = GetOwningPlayer(u);
            return Heroes[cPid(p)];
        }
    }
}

library Init requires StdLib
{
    function onInit() {
        
        ClearMapMusic();
        SetTimeOfDayScale( 0.0 );
        SetTimeOfDay( 12.0 );
        FogEnable( false );
        FogMaskEnable( false );
        
        ForForce( GetPlayersMatching(Condition(function FilterPlayerStatePlaying)), function() {
            Hero.create(GetEnumPlayer());
        });
    }
}

library StdLib requires Globals, Common, BallLib
{
}
//! endzinc

//! zinc
library Core requires StdLib
{
    constant real GROUND_HIT_SLOWDOWN       = 50;
    constant real GROUND_FRICTION_SLOWDOWN  = 10;
    
    function Get_Ball() {
        Hero h;
        
        if ( Ball.Owner != 0 ) {
            h = Ball.Owner;
            h.dispossess(0);
            h.disableInteraction(1.4);
            h.echo("TRIGSTR_298");
        }
        
        h = GetHero(GetEnumUnit());
        Ball.Owner = h;
        h.setSpeed(200);
        h.echo("TRIGSTR_295");
        
        Ball.setSpeed(0);
        Ball.setScale(350);
    }

    function CanUnitHeadBall(unit u) -> boolean {
        Hero h = GetHero(u);
        
        boolean b1 = h.IsInAir;
        boolean b2 = h.Vz >= 0;
        
        return b1 && b2;
    }

    function CanUnitGetBall(unit u) -> boolean {
        Hero h = GetHero(u);
        
        real ball_h = Ball.getHeight();
        real unit_h = h.getHeight();
        
        boolean b1 = Ball.CantInteractTimer == null;
        boolean b2 = h.CantHoldBallTimer == null;
        boolean b3 = !h.isOwner();
        boolean b4 = (ball_h >= unit_h) && (ball_h <= unit_h + Hero.Tallness);
        boolean b5 = IsUnitEnemy(u, Ball.getOwner());
        
        return b1 && b2 && b3 && b4 && b5;
    }
    
    function Flag_Move() {
        real h = Ball.getHeight();
        real v = Ball.getSpeed();
        real Vz = Ball.Vz;
        real dist;
        
        if ( v > Ball.MinimumSpeed ) {
            dist = 0.1*v*(Vz+SquareRoot(Vz*Vz+2*G*h))/G;
            Flag.setLoc( PolarProjectionBJ( Ball.getLoc(), dist, Ball.Direction) );
        } else
            Flag.setLoc( Ball.getLoc() );
    }

    function Jump_Periodic_Actions() {
        group g = GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function IsFilterUnitHero));
        ForGroup(g, function() {
            Hero h = GetHero(GetEnumUnit());
            
            if ( h.IsInAir ) {
                h.setHeight( h.getHeight() + h.Vz );
                h.Vz -= G;
                
                if ( h.getHeight() <= 0.01 ) {
                    h.IsInAir = false;
                    h.setHeight(0);
                    h.Vz = 0;
                }
            }
        });
    }
    
    function Ball_PlaceInFrontOfOwner() {
        location loc_owner = Ball.Owner.getLoc();
        real facing = Ball.Owner.getFacing();
        location loc_ball_new = PolarProjectionBJ( loc_owner, 50, facing);
        
        Ball.setLoc( loc_ball_new );
        Ball.setFacing( facing );
        Ball.setHeight( Ball.Owner.getHeight() + Ball.DefaultHeight );
    }
    
    public function Horizontal_Animations() {
        location loc_ball_new = PolarProjectionBJ( Ball.getLoc(), 100, Ball.Direction);

        if ( Ball.getSpeed() <= Ball.MinimumSpeed ) {
            Ball.stop();
            Ball.setSpeed(0);
            Ball.setScale(0);
        } else {
            Ball.setScale( 1.5 * Ball.getSpeed() );
            Ball.move(loc_ball_new);
        }
    }
    
    function Vertical_Animations() {
        boolean b1 = Ball.Vz < 0;
        boolean b2 = Ball.getHeight() <= Ball.DefaultHeight;
        
        //if Ball_HitsGround()
        if ( b1 && b2 ) {
            Ball.setSpeed(Ball.getSpeed() - GROUND_HIT_SLOWDOWN);
            Ball.resetHeight();
            
            if ( RAbsBJ(Ball.Vz) < G*5.0 ) {
                Flag.hide();
                Ball.IsInAir = false;
                Ball.Vz = 0;
            } else
                Ball.Vz *= (-0.6);
        } else {
            // Ball.UpdateHeight()
            Ball.setHeight( Ball.getHeight() + Ball.Vz );
            Ball.Vz -= G;
        }
        
        Flag_Move();
    }
    
    function Set_Ball_Owner() {
        group g = GetUnitsInRangeOfLocMatching(100, Ball.getLoc(), Condition(function IsFilterUnitHero));
        ForGroup( g, function() {
            unit u = GetEnumUnit();
            Hero h = GetHero(u);

            if (CanUnitGetBall(u)) {
                if (!CanUnitHeadBall(u)) {
                    Flag.hide();
                    if (!Per_001_Execution && h.SlowDownTimer == null)
                        Get_Ball();
                }
            }
        });
    }
    
    function Ball_Periodic_Actions() {
        if ( Ball.Owner == 0 ) {
            Horizontal_Animations();
            
            if ( Ball.IsInAir )
                Vertical_Animations();
            else
                Ball.setSpeed(Ball.getSpeed() - GROUND_FRICTION_SLOWDOWN);
        } else
            Ball_PlaceInFrontOfOwner();
    }
    
    function Periodic_10() {
        Ball_Periodic_Actions();
        Set_Ball_Owner();
        Jump_Periodic_Actions();
    }
    
    boolean Per_001_Execution = false;
    
    function Periodic_100() {
        Per_001_Execution = true;
        Set_Ball_Owner();
        Per_001_Execution = false;
    }
    
    function onInit() {
        trigger t = CreateTrigger();
        TriggerRegisterTimerEventPeriodic( t, 0.01 );
        TriggerAddAction( t, function Periodic_100 );
        
        t = CreateTrigger();
        TriggerRegisterTimerEventPeriodic( t, 0.1 );
        TriggerAddAction( t, function Periodic_10 );
    }
    
}
//! endzinc

//! zinc
library Abils requires Core
{
    constant integer ABILITY_SHORT_PASS     = 'A007';
    constant integer ABILITY_KICK           = 'A00K';
    constant integer ABILITY_LONG_PASS      = 'A008';
    constant integer ABILITY_JUMP           = 'A009';
    
    constant real CANT_HOLD_BALL_TIME       = 0.9;
    
    function Shot_Common_Actions() {
        Ball.disableInteraction(0.7);
        Horizontal_Animations();
    }
    
    function Z_Actions() {
        Hero h = GetHero(GetTriggerUnit());
        
        if ( !h.isOwner() )
            return;
        
        if (h.IsInAir) {
            // V+Z
            Ball.Vz = 0;
            Ball.IsInAir = true;
            Ball.Direction = Ball.Owner.getFacing();
            Ball.setSpeed(522);
            h.dispossess(0);
            h.disableInteraction(CANT_HOLD_BALL_TIME);
        }
        
        Shot_Common_Actions();
    }
    
    function X_Actions() {
        Hero h = GetHero(GetTriggerUnit());
        unit u = GetTriggerUnit();
        location loc_target = GetSpellTargetLoc();
        
        if ( Ball.Owner == h ) {
            Ball.Vz = 20;
            Ball.IsInAir = true;
            Ball.Direction = AngleBetweenPoints( Ball.getLoc(), loc_target );
            Ball.setSpeed(362);
            h.dispossess(0);
            h.disableInteraction(CANT_HOLD_BALL_TIME);
            
            Shot_Common_Actions();
            Flag.show();
        }
        
        IssueImmediateOrder(u, "stop");
        SetUnitFacingToFaceLocTimed(u, loc_target, 0);
    }
    
    function C_Actions() {
        Hero h = GetHero(GetTriggerUnit());
        location loc_target = GetSpellTargetLoc();
        real dist, speed;
        
        if ( h.IsInAir || !h.isOwner() )
            return;
        
        Ball.resetHeight();
        Ball.Vz = 30;
        Ball.IsInAir = true;
        Ball.Direction = AngleBetweenPoints( Ball.getLoc(), loc_target );
        
        dist = DistanceBetweenPoints( Ball.getLoc(), loc_target );
        speed = 10 * G * dist * 0.5 / Ball.Vz;
        Ball.setSpeed(speed);
        
        h.dispossess(1.0);
        h.disableInteraction(CANT_HOLD_BALL_TIME);
        
        Shot_Common_Actions();
        Flag.show();
    }
    
    function V_Actions() {
        Hero h = GetHero(GetTriggerUnit());
        
        if (h.IsInAir || h.SlowDownTimer != null)
            return;
        
        h.IsInAir = true;
        if ( !h.isOwner() )
            h.Vz = 20;
        else
            h.Vz = 15;
    }
    
    function AbilityCast() {
        integer sid = GetSpellAbilityId();
        
        if (sid == ABILITY_SHORT_PASS)
            Z_Actions();
        else if (sid == ABILITY_KICK)
            X_Actions();
        else if (sid == ABILITY_LONG_PASS)
            C_Actions();
        else if (sid == ABILITY_JUMP)
            V_Actions();
    }

    function onInit() {
        trigger t = CreateTrigger(  );
        TriggerRegisterAnyUnitEventBJ( t, EVENT_PLAYER_UNIT_SPELL_CAST );
        TriggerAddAction( t, function AbilityCast );
    }
}
//! endzinc

//! zinc
library BallLib
{
    private unit BALL = null;
    
    public struct Ball
    {
        static real DefaultHeight  = 12.0;
        static real MinimumSpeed   = 1.0;
        
        static boolean IsInAir      = false;
        static real Direction       = 0.0;
        static real Vz              = 0.0;
        static Hero Owner           = 0;
        static timer CantInteractTimer = null;
        
        static method getLoc() -> location {
            return GetUnitLoc( BALL );
        }
        static method setLoc(location loc) {
            SetUnitPositionLoc( BALL, loc );
        }
        static method move(location loc) {
            IssuePointOrderLoc( BALL, "move", loc );
        }
        static method getHeight() -> real {
            return GetUnitFlyHeight(BALL);
        }
        static method setHeight(real h) {
            SetUnitFlyHeight( BALL, h, 0.0 );
        }
        static method getSpeed() -> real {
            return GetUnitMoveSpeed(BALL);
        }
        static method setSpeed(real speed) {
            SetUnitMoveSpeed(BALL, RMaxBJ(Ball.MinimumSpeed, RMinBJ(speed, 522)));
        }
        static method setScale(real scale) {
            SetUnitTimeScalePercent( BALL, scale );
        }
        static method setFacing(real facing) {
            SetUnitFacing( BALL, facing );
        }
        static method stop() {
            IssueImmediateOrder(BALL, "stop");
        }
        static method resetHeight() {
            Ball.setHeight(Ball.DefaultHeight);
        }
        static method getOwner() -> player {
            if (Ball.Owner != 0)
                return GetOwningPlayer( Ball.Owner.getHandle() );
            return null;
        }
        static method enableInteraction() {
            DestroyTimer(Ball.CantInteractTimer);
            Ball.CantInteractTimer = null;
        }
        static method disableInteraction(real time) {
            DestroyTimer(CantInteractTimer);
            CantInteractTimer = CreateTimer();
            TimerStart(CantInteractTimer, time, false, function Ball.enableInteraction);
        }
    }
    
    function onInit() {
        BALL = gg_unit_h000_0001;
        Ball.setLoc( GetRectCenter(gg_rct_Center) );
    }
}
//! endzinc
