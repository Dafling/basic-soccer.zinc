globals
    group array TeamHeroes
    hero array Heroes
endglobals

//! zinc
library Globals
{
    public
    {
        constant real G             = 2.3;
        
        struct hero
        {
            private unit h          = null;
            
            boolean IsInAir         = false;
            integer SlowDownTime    = 0;
            integer CantHoldBall    = 0;
            real Vz                 = 0.0;
            
            static integer Tallness = 100;
            
            method gethandle() -> unit {
                return this.h;
            }
            // set fly height
            method set_h(real h) {
                SetUnitFlyHeight(this.h, h, 0.0);
            }
            // get fly height
            method get_h() -> real {
                return GetUnitFlyHeight(this.h);
            }
            method isowner() -> boolean {
                return this.h == Ball.Owner;
            }
            method setspeed(real speed) {
                SetUnitMoveSpeed(this.h, speed);
            }
            
            static method create(player p) -> hero {
                hero h = hero.allocate();
                
                integer pid = cPid(p);
                location loc_player = GetRandomLocInRect(gg_rct_LeftTeamStay);
                unit u = CreateUnitAtLoc( p, 'H001', loc_player, 0 );
                SetHeroLevel( u, 10, false );
                GroupAddUnit( TeamHeroes[1], u );
                
                h.h = u;
                Heroes[pid] = h;
                
                return h;
            }
        }
    }
    
    function onInit()
    {
        TeamHeroes[1] = CreateGroup();
        TeamHeroes[2] = CreateGroup();
    }
}

library Init
{
    function onInit() {
        force f;
        
        PolledWait(0.5);
        
        ClearMapMusic();
        SetTimeOfDayScale( 0.0 );
        SetTimeOfDay( 12.0 );
        FogEnable( false );
        FogMaskEnable( false );
        
        f = GetPlayersMatching(Condition(function FilterPlayerStatePlaying));
        ForForce( f, function() {
            hero h = hero.create(GetEnumPlayer());
        });
    }
}

library Common
{
    public
    {
        function cPid(player p) -> integer {
            return GetConvertedPlayerId(p);
        }
        function IsFilterUnitHero() -> boolean {
            integer pid = cPid(GetOwningPlayer(GetFilterUnit()));
            return GetFilterUnit() == Heroes[pid].gethandle();
        }
        function FilterPlayerStatePlaying() -> boolean {
            return GetPlayerSlotState(GetFilterPlayer()) == PLAYER_SLOT_STATE_PLAYING;
        }
        function echo(string s) {
            DisplayTextToForce(GetPlayersAll(),s);
        }
        function p_echo(player p, string s) {
            DisplayTextToPlayer(p,0,0,s);
        }
        function GetHero(unit u) -> hero {
            player p = GetOwningPlayer(u);
            return Heroes[cPid(p)];
        }
    }
}

library StdLib requires Common
{
}

library Flag
{
    private unit FLAG = null;
    
    public
    {
        function Flag_SetPos(location pos) {
            SetUnitPositionLoc(FLAG, pos);
        }
        function Flag_Hide() {
            ShowUnit(FLAG, false);
        }
        function Flag_Show() {
            ShowUnit(FLAG, true);
        }
    }
    
    function onInit() {
        FLAG = gg_unit_h004_0007;
        Flag_Hide();
    }
}
//! endzinc

//! zinc
library Core requires Flag
{
    private boolean Interval_001_Execution = false;
    
    constant real GROUND_HIT_FACTOR         = 50;
    constant real GROUND_FRICTION_FACTOR    = 10;
    
    function Get_Ball() {
        player p = Ball.GetPlayerOwner();
        integer pid = cPid(p);
        
        if ( Ball.Owner != null ) {
            p_echo( p, "TRIGSTR_298" );
            Heroes[pid].CantHoldBall = 15;
        }
        
        Ball.Owner = GetEnumUnit();
        p_echo( Ball.GetPlayerOwner(), "TRIGSTR_295" );
        
        Ball.ReduceSpeedBy(1000);
        Ball.SetScale(350);
    }

    function CanUnitHeadBall(unit u) -> boolean {
        hero h = GetHero(u);
        
        boolean b1 = h.IsInAir;
        boolean b2 = h.Vz >= 0;
        
        return b1 && b2;
    }

    function CanUnitGetBall(unit u) -> boolean {
        hero h = GetHero(u);
        
        real ball_h = Ball.GetHeight();
        real unit_h = h.get_h();
        
        boolean b1 = Ball.CantInteractTime <= 0;
        boolean b2 = h.CantHoldBall <= 0;
        boolean b3 = !h.isowner();
        boolean b4 = (ball_h >= unit_h) && (ball_h <= unit_h + hero.Tallness);
        boolean b5 = IsUnitEnemy(u, Ball.GetPlayerOwner());
        
        return b1 && b2 && b3 && b4 && b5;
    }

    function Set_Ball_Owner() {
        conditionfunc cond = Condition(function IsFilterUnitHero);
        group g = GetUnitsInRangeOfLocMatching(100, Ball.GetLoc(), cond);
        
        ForGroup( g, function() {
            unit u = GetEnumUnit();
            hero h = GetHero(u);

            if (CanUnitGetBall(u)) {
                if (!CanUnitHeadBall(u)) {
                    Flag_Hide();
                    if (!Interval_001_Execution && h.SlowDownTime == 0)
                        Get_Ball();
                }
            }
        });
    }
    
    function Flag_Move() {
        real h = Ball.GetHeight();
        real v = Ball.GetSpeed();
        real Vz = Ball.Vz;
        real dist;
        
        if ( v > Ball.MinimumSpeed ) {
            dist = 0.1*v*(Vz+SquareRoot(Vz*Vz+2*G*h))/G;
            Flag_SetPos( PolarProjectionBJ( Ball.GetLoc(), dist, Ball.Direction) );
        } else
            Flag_SetPos( Ball.GetLoc() );
    }
    
    function Vertical_Animations() {
        boolean b1 = Ball.Vz < 0;
        boolean b2 = Ball.GetHeight() <= Ball.DefaultHeight;
        
        //Ball_HitsGround()
        if ( b1 && b2 ) {
            //BallHitsGround_Actions()
            Ball.ReduceSpeedBy(GROUND_HIT_FACTOR);
            Ball.ResetHeight();
            
            if ( RAbsBJ(Ball.Vz) < G*5.0 ) {
                Flag_Hide();
                Ball.IsInAir = false;
                Ball.Vz = 0;
            } else
                Ball.Vz *= (-0.6);
        } else {
            // Ball.UpdateHeight()
            Ball.SetHeight( Ball.GetHeight() + Ball.Vz );
            Ball.Vz -= G;
        }
        
        Flag_Move();
    }
    
    public function Horizontal_Animations() {
        location loc_ball_new = PolarProjectionBJ( Ball.GetLoc(), 100, Ball.Direction);

        if ( Ball.GetSpeed() <= Ball.MinimumSpeed ) {
            Ball.Stop();
            Ball.ReduceSpeedBy( 1000 );
            Ball.SetScale( 0 );
        } else {
            Ball.SetScale( 1.5 * Ball.GetSpeed() );
            Ball.Move(loc_ball_new);
        }
    }
    
    function Ball_PlaceInFrontOfOwner() {
        location loc_owner = GetUnitLoc(Ball.Owner);
        real facing = GetUnitFacing(Ball.Owner);
        location loc_ball_new = PolarProjectionBJ( loc_owner, 50, facing);
        
        Ball.SetLoc( loc_ball_new );
        Ball.SetFacing( facing );
        Ball.SetHeight( GetUnitFlyHeight(Ball.Owner) + Ball.DefaultHeight );
    }
    
    function Ball_Periodic_Actions() {
        if ( Ball.Owner == null ) {
            Horizontal_Animations();
            
            if ( Ball.IsInAir )
                Vertical_Animations();
            else
                Ball.ReduceSpeedBy(GROUND_FRICTION_FACTOR);
        } else
            Ball_PlaceInFrontOfOwner();
    }

    function Jump_Periodic_Actions() {
        group g = CreateGroup();
        GroupAddGroup(TeamHeroes[1], g);
        GroupAddGroup(TeamHeroes[2], g);
        
        ForGroup(g, function() {
            hero h = GetHero(GetEnumUnit());
            
            if ( h.IsInAir ) {
                h.set_h( h.get_h() + h.Vz );
                h.Vz -= G;
                
                if ( h.get_h() <= 0.01 ) {
                    h.IsInAir = false;
                    h.set_h(0);
                    h.Vz = 0;
                }
            }
        });
    }
    
    public function Players_Update_Speed() {
        conditionfunc cond = Condition(function IsFilterUnitHero);
        group g = GetUnitsInRectMatching(GetPlayableMapRect(), cond);
        ForGroup( g, function() { 
            hero h = GetHero(GetEnumUnit());
            
            if (h.SlowDownTime == 0) {
                if (h.isowner())
                    h.setspeed(200);
                else
                    h.setspeed(290);
            } else {
                h.SlowDownTime -= 1;
                h.setspeed(0.5*290);
            }
        } );
    }
    
    function Players_Update_CantHoldBall_Value() {
        conditionfunc cond = Condition(function FilterPlayerStatePlaying);
        force f = GetPlayersMatching(cond);
        ForForce( f, function() {
            integer pid = cPid(GetEnumPlayer());
            hero h = Heroes[pid];
            h.CantHoldBall = IMaxBJ(0, h.CantHoldBall-1);
        });
    }
    
    function Periodic_10() {
        Ball_Periodic_Actions();
        Players_Update_CantHoldBall_Value();
        Set_Ball_Owner();
        Ball.CantInteractTime = IMaxBJ(0, Ball.CantInteractTime-1);
        Players_Update_Speed();
        Jump_Periodic_Actions();
    }
    
    function Periodic_100() {
        Interval_001_Execution = true;
        Set_Ball_Owner();
        Interval_001_Execution = false;
    }
    
    function onInit() {
        trigger t = CreateTrigger();
        TriggerRegisterTimerEventPeriodic( t, 0.01 );
        TriggerAddAction( t, function Periodic_100 );
        
        t = CreateTrigger();
        TriggerRegisterTimerEventPeriodic( t, 0.1 );
        TriggerAddAction( t, function Periodic_10 );
    }
    
}
//! endzinc

//! zinc
library Abils requires Core
{
    constant integer ABILITY_SHORT_PASS     = 'A007';
    constant integer ABILITY_KICK           = 'A00K';
    constant integer ABILITY_LONG_PASS      = 'A008';
    constant integer ABILITY_JUMP           = 'A009';
    
    function Shot_Common_Actions() {
        integer pid = cPid(Ball.GetPlayerOwner());
        
        Heroes[pid].CantHoldBall = 10;
        Ball.CantInteractTime = 7;
        Ball.Owner = null;
        Players_Update_Speed();
        Horizontal_Animations();
    }
    
    function Z_Actions() {
        hero h = GetHero(GetTriggerUnit());
        
        if ( !h.isowner() )
            return;
        
        if (h.IsInAir) {
            // V+Z
            Ball.Vz = 0;
            Ball.IsInAir = true;
            Ball.Direction = GetUnitFacing(Ball.Owner);
            Ball.SetSpeed(522);
        }
        
        Shot_Common_Actions();
    }
    
    function X_Actions() {
        unit u = GetTriggerUnit();
        location loc_target = GetSpellTargetLoc();
        
        if ( Ball.Owner == u ) {
            Ball.Vz = 20;
            Ball.IsInAir = true;
            Ball.Direction = AngleBetweenPoints( Ball.GetLoc(), loc_target );
            Ball.SetSpeed(362);
            
            Shot_Common_Actions();
            
            Flag_Show();
        }
        
        IssueImmediateOrder(u, "stop");
        SetUnitFacingToFaceLocTimed(u, loc_target, 0);
    }
    
    function C_Actions() {
        hero h = GetHero(GetTriggerUnit());
        location loc_target = GetSpellTargetLoc();
        real dist, speed;
        
        if ( h.IsInAir || !h.isowner() )
            return;
        
        h.SlowDownTime = 10;
        
        Ball.ResetHeight();
        Ball.Vz = 30;
        Ball.IsInAir = true;
        Ball.Direction = AngleBetweenPoints( Ball.GetLoc(), loc_target );
        
        dist = DistanceBetweenPoints( Ball.GetLoc(), loc_target );
        speed = 10 * G * dist * 0.5 / Ball.Vz;
        Ball.SetSpeed(speed);
        
        Shot_Common_Actions();
        
        Flag_Show();
    }
    
    function V_Actions() {
        hero h = GetHero(GetTriggerUnit());
        
        if (h.IsInAir || h.SlowDownTime > 0)
            return;
        
        h.IsInAir = true;
        if ( !h.isowner() )
            h.Vz = 20;
        else
            h.Vz = 15;
    }
    
    function AbilityCast() {
        integer sid = GetSpellAbilityId();
        
        if (sid == ABILITY_SHORT_PASS)
            Z_Actions();
        else if (sid == ABILITY_KICK)
            X_Actions();
        else if (sid == ABILITY_LONG_PASS)
            C_Actions();
        else if (sid == ABILITY_JUMP)
            V_Actions();
    }

    function onInit() {
        trigger t = CreateTrigger(  );
        TriggerRegisterAnyUnitEventBJ( t, EVENT_PLAYER_UNIT_SPELL_CAST );
        TriggerAddAction( t, function AbilityCast );
    }
}
//! endzinc

//! zinc
library BallLib
{
    public Ball__class Ball;
    
    private unit BALL = null;
    
    struct Ball__class
    {
        static real DefaultHeight  = 12.0;
        static real MinimumSpeed   = 1.0;
        
        boolean IsInAir      = false;
        integer CantInteractTime = 0; // ImmuneTimer
        real Direction       = 0.0;
        real Vz              = 0.0;
        unit Owner           = null;
        
        method GetPlayerOwner() -> player {
            return GetOwningPlayer( this.Owner );
        }
        method GetLoc() -> location {
            return GetUnitLoc( BALL );
        }
        method SetLoc(location loc) {
            SetUnitPositionLoc( BALL, loc );
        }
        method Move(location loc) {
            IssuePointOrderLoc( BALL, "move", loc );
        }
        method GetHeight() -> real {
            return GetUnitFlyHeight(BALL);
        }
        method SetHeight(real h) {
            SetUnitFlyHeight( BALL, h, 0.0 );
        }
        method ResetHeight() {
            this.SetHeight(this.DefaultHeight);
        }
        method GetSpeed() -> real {
            return GetUnitMoveSpeed(BALL);
        }
        method SetSpeed(real speed) {
            speed = RMinBJ(speed, 522);
            SetUnitMoveSpeed(BALL, speed);
        }
        method SetScale(real scale) {
            SetUnitTimeScalePercent( BALL, scale );
        }
        method SetFacing(real facing) {
            SetUnitFacing( BALL, facing );
        }
        method ReduceSpeedBy(real factor) {
            this.SetSpeed( RMaxBJ( this.MinimumSpeed, this.GetSpeed() - factor ) );
        }
        method Stop() {
            IssueImmediateOrder(BALL, "stop");
        }
        method Land() {
            this.ResetHeight(  );
            this.Vz = 0;
            this.IsInAir = false;
        }
    }
    
    function onInit() {
        Ball = Ball__class.create();
        BALL = gg_unit_h000_0001;
        Ball.SetLoc( GetRectCenter(gg_rct_Center) );
    }
}
//! endzinc
